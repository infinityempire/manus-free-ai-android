name: Build Android APK

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
  repository_dispatch:
    types: [build-apk]

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 8 (for compatibility)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '8'
          cache: gradle

      - name: Install Android SDK commandline-tools
        run: |
          mkdir -p "$ANDROID_HOME"
          cd "$ANDROID_HOME"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools
          unzip -q cmdline-tools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          rm -f cmdline-tools.zip
          yes | cmdline-tools/latest/bin/sdkmanager --licenses || true

      - name: Install required SDK packages
        run: |
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Create local.properties
        run: echo "sdk.dir=${ANDROID_SDK_ROOT}" > local.properties

      - name: Clear Gradle Cache
        run: |
          rm -rf ~/.gradle/caches
          ./gradlew --stop || true

      - name: Gradle clean
        run: ./gradlew clean --no-daemon --warning-mode=all --stacktrace

      - name: Build debug APK with comprehensive options
        run: |
          ./gradlew assembleDebug \
            --no-daemon \
            --no-build-cache \
            --rerun-tasks \
            --stacktrace \
            --info \
            --warning-mode=all

      - name: Verify APK was created
        run: |
          echo "=== Searching for APK files ==="
          find . -name "*.apk" -type f -exec ls -la {} \;
          echo "=== Build outputs directory ==="
          ls -la app/build/outputs/apk/debug/ || echo "Debug directory not found"
          echo "=== All build outputs ==="
          ls -R app/build/outputs/ || echo "No build outputs found"

      - name: Copy APK to root for easier access
        run: |
          if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
            cp app/build/outputs/apk/debug/app-debug.apk ./manus-free-ai-android-FIXED.apk
            echo "✅ APK copied successfully"
            ls -la ./manus-free-ai-android-FIXED.apk
          else
            echo "❌ APK not found in expected location"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: manus-free-ai-android-APK
          path: |
            ./manus-free-ai-android-FIXED.apk
            app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error

      - name: Upload Gradle logs (for debugging)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gradle-logs
          path: |
            gradle_build_output.txt
            gradle_clean_output.txt
            gradle_dryrun.txt
          if-no-files-found: ignore

