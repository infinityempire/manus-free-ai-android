name: Build Android APK

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
  repository_dispatch:
    types: [build-apk]

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Install Android SDK commandline-tools
        run: |
          mkdir -p "$ANDROID_HOME"
          cd "$ANDROID_HOME"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools
          unzip -q cmdline-tools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          rm -f cmdline-tools.zip

      - name: Accept ALL SDK licenses automatically
        run: |
          # Create a script that accepts all licenses
          mkdir -p "$ANDROID_SDK_ROOT/licenses"
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_SDK_ROOT/licenses/android-sdk-preview-license"
          echo "504667f4c0de7af1a06de9f4b1727b84351f2910" > "$ANDROID_SDK_ROOT/licenses/android-googletv-license"
          echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > "$ANDROID_SDK_ROOT/licenses/google-gdk-license"
          echo "d975f751698a77b662f1254ddbeed3901e976f5a" > "$ANDROID_SDK_ROOT/licenses/intel-android-extra-license"
          echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > "$ANDROID_SDK_ROOT/licenses/android-googletv-license"
          echo "8b42eada9d7c8c5b9ccc8a8c6e8b5e5a1a7a7a7a" > "$ANDROID_SDK_ROOT/licenses/mips-android-sysimage-license"

      - name: Install required SDK packages
        run: |
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            --verbose

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Create local.properties
        run: echo "sdk.dir=${ANDROID_SDK_ROOT}" > local.properties

      - name: Clear Gradle Cache
        run: |
          rm -rf ~/.gradle/caches
          ./gradlew --stop || true

      - name: Gradle clean
        run: ./gradlew clean --no-daemon --warning-mode=all --stacktrace

      - name: Build debug APK
        run: |
          ./gradlew assembleDebug \
            --no-daemon \
            --no-build-cache \
            --rerun-tasks \
            --stacktrace \
            --info \
            --warning-mode=all

      - name: Verify APK was created
        run: |
          echo "=== Searching for APK files ==="
          find . -name "*.apk" -type f -exec ls -la {} \;
          echo "=== Build outputs directory ==="
          ls -la app/build/outputs/apk/debug/ || echo "Debug directory not found"

      - name: Copy APK to root
        run: |
          if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
            cp app/build/outputs/apk/debug/app-debug.apk ./manus-free-ai-android-FIXED.apk
            echo "✅ APK copied successfully"
            ls -la ./manus-free-ai-android-FIXED.apk
          else
            echo "❌ APK not found"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: manus-free-ai-android-APK
          path: ./manus-free-ai-android-FIXED.apk
          if-no-files-found: error

